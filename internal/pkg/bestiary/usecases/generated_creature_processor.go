package usecases

import (
	"context"
	"fmt"
	"github.com/IlyaChgn/2025_IMAO_DnD_Assistant_backend/internal/pkg/apperrors"
	"github.com/IlyaChgn/2025_IMAO_DnD_Assistant_backend/internal/pkg/logger"
	"regexp"
	"strings"

	"github.com/IlyaChgn/2025_IMAO_DnD_Assistant_backend/internal/models"
	bestiaryinterfaces "github.com/IlyaChgn/2025_IMAO_DnD_Assistant_backend/internal/pkg/bestiary"
)

type GeneratedCreatureProcessor struct {
	actionProcessor bestiaryinterfaces.ActionProcessorUsecases
}

func NewGeneratedCreatureProcessor(
	actionProcessor bestiaryinterfaces.ActionProcessorUsecases,
) bestiaryinterfaces.GeneratedCreatureProcessorUsecases {
	return &GeneratedCreatureProcessor{
		actionProcessor: actionProcessor,
	}
}

func (processor *GeneratedCreatureProcessor) ValidateAndProcessGeneratedCreature(
	ctx context.Context, c *models.Creature,
) (*models.Creature, error) {
	l := logger.FromContext(ctx)

	if c == nil {
		l.UsecasesError(apperrors.NilCreatureErr, 0, nil)
		return nil, apperrors.NilCreatureErr
	}

	updated := *c

	// üß† –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å LLM-–∞—Ç–∞–∫–∏
	attacksLLM, err := processor.actionProcessor.ProcessActions(context.Background(), updated.Actions)
	if err != nil {
		l.UsecasesInfo(fmt.Sprintf("failed to parse LLM actions: %v", err), 0)
		// –û—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
	} else {
		updated.LLMParsedAttack = attacksLLM
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
	for i, action := range updated.Actions {
		updated.Actions[i].Value = processActionValue(action.Value)
	}

	return &updated, nil
}

func processActionValue(value string) string {
	if strings.TrimSpace(value) == "" {
		return value
	}

	// 1. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è –≤ <p><em>...</em>
	colonIdx := strings.Index(value, ":")
	if colonIdx != -1 {
		prefix := strings.TrimSpace(value[:colonIdx])
		rest := strings.TrimSpace(value[colonIdx+1:])
		value = `<p><em>` + prefix + `:</em> ` + rest
	}

	// 2. –ó–∞–º–µ–Ω—è–µ–º "+15", "-2", "+0" –∏ —Ç.–ø. –ø–æ—Å–ª–µ <em> –Ω–∞ <dice-roller>
	reAttackBonus := regexp.MustCompile(`([^\w])([+-]\d{1,2})`)
	value = reAttackBonus.ReplaceAllStringFunc(value, func(match string) string {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞–∫ –∏ —á–∏—Å–ª–æ
		sign := string(match[len(match)-3])
		num := match[len(match)-2:]
		formula := "–∫20 " + sign + " " + strings.TrimLeft(num, "+-")
		return `</em> <dice-roller label="–ê—Ç–∞–∫–∞" formula="` + formula + `">` + sign + num + `</dice-roller>`
	})

	// 3. –ó–∞–º–µ–Ω—è–µ–º (3–∫8 + 8), (3–∫6) –∏ —Ç.–ø. –Ω–∞ dice-roller (—É—Ä–æ–Ω)
	reDice := regexp.MustCompile(`\((\d+–∫\d+(?:\s*[+-]\s*\d+)?)\)`)
	value = reDice.ReplaceAllString(value, `(<dice-roller label="–£—Ä–æ–Ω" formula="$1"/>)`)

	return value
}
